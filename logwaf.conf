	location ~ ^/LOGWAFBANNEDSET {
                allow 192.168.10.94;
                allow 127.0.0.1;
                deny all;
		default_type 'text/plain';
		content_by_lua '
			local banned = ngx.shared.banned
			local uri_args = ngx.req.get_uri_args()
			if uri_args["type"] == "remote_addr" and uri_args["method"] == "add" then
				banned:set(uri_args["value"],"remote_addr")
				ngx.say("1-Set banned successfully")
                        elseif uri_args["type"] == "remote_addr" and uri_args["method"] == "del" then
				banned:delete(uri_args["value"])
				ngx.say("1-del banned successfully")
			end
			if uri_args["type"] == "UA" and uri_args["method"] == "add" then
                                banned:set(ngx.md5(ngx.var.request_body),ngx.var.request_body)
				ngx.say(ngx.var.request_body)
				ngx.say("2-Set banned successfully")
                        elseif uri_args["type"] == "UA" and uri_args["method"] == "del" then
                                banned:delete(ngx.md5(ngx.var.request_body))
				ngx.say("2-del banned successfully")
                        end
                        if uri_args["type"] == "reffer" and uri_args["method"] == "add" then
                                banned:set(ngx.md5(ngx.var.request_body),ngx.var.request_body)
                                ngx.say(ngx.var.request_body)
                                ngx.say("2-Set banned successfully")
                        elseif uri_args["type"] == "reffer" and uri_args["method"] == "del" then
                                banned:delete(ngx.md5(ngx.var.request_body))
                                ngx.say("2-del banned successfully")
                        end
                        if uri_args["type"] == "userid" and uri_args["method"] == "add" then
                                banned:set(ngx.var.request_body,ngx.var.request_body)
                                ngx.say(ngx.var.request_body)
                                ngx.say("3-Set banned successfully")
                        elseif uri_args["type"] == "userid" and uri_args["method"] == "del" then
                                banned:delete(ngx.var.request_body)
                                ngx.say("3-del banned successfully")
                        end
		';
	}

	location ~ ^/LOGWAFBANNEDCONF {
                allow 192.168.10.94;
                allow 127.0.0.1;
                deny all;
		default_type 'text/plain';
		content_by_lua '
			local banned = ngx.shared.banned
			local banned_ips = {}
			local banned_ua = {}
			local banned_reffer = {}
                        local banned_userid = {}
			for key, val in ipairs(banned:get_keys()) do
				if string.find(val,"^%d+%.%d+%.%d+%.%d+$") then
					table.insert(banned_ips , val)
				elseif string.find(banned:get(val),"^http://") then
					table.insert(banned_reffer , banned:get(val))
                                elseif string.find(banned:get(val),"^pcsuv=") then
                                        table.insert(banned_userid , banned:get(val))
				else
					table.insert(banned_ua , banned:get(val))
				end
          		end
			ngx.say(ngx.var.server_addr.."----------------Banned Remote_addr(IPS)----------------")
			for k,v in ipairs(banned_ips) do
				ngx.say(v)
			end
                        ngx.say(ngx.var.server_addr.."----------------Banned user_agent----------------")
                        for k,v in ipairs(banned_ua) do
                                ngx.say(v)
                        end
                        ngx.say(ngx.var.server_addr.."----------------Banned reffer----------------")
                        for k,v in ipairs(banned_reffer) do
                                ngx.say(v)
                        end
                        ngx.say(ngx.var.server_addr.."----------------Banned user cookie id----------------")
                        for k,v in ipairs(banned_userid) do
                                ngx.say(v)
                        end
		';
	}

	location ~ ^/LOGWAFRULESET {
                allow 192.168.10.94;
                allow 127.0.0.1;
                deny all;
                default_type 'text/plain';
		content_by_lua '
			if method=="GET" then
				ngx.say("NOT Spport Get Method")
				return
			end
			local ruledb = ngx.shared.ruledb
			local uri_args = ngx.req.get_uri_args()
			valuemd5 = ngx.md5(ngx.var.request_body)
			local rulearry = nil
			local tag = 0
			if uri_args["type"] == "xss" or uri_args["type"] == "sqlinject" or uri_args["type"] == "scanfeature" or uri_args["type"] == "adminpage" or  uri_args["type"] == "sensitivefile" then
				if uri_args["method"] == "add" then
					rulearry = ruledb:get(uri_args["type"])	
					if rulearry == nil then
						ruledb:set(uri_args["type"],valuemd5)
						tag = 1
					else
						if string.find(rulearry,valuemd5) then
							ngx.say("the rule ("..ngx.var.request_body..") is already exist!!!")
							return
						else
							newrule = rulearry..","..valuemd5
							ruledb:replace(uri_args["type"],newrule)
							tag = 1
						end
					end
				end
				if uri_args["method"] == "del" then
					rulearry = ruledb:get(uri_args["type"])
					if rulearry == nil then
						ngx.say("the rule "..uri_args["type"].."is not exist")
						return
					else
						if string.find(rulearry,valuemd5) then
							ruledb:delete(valuemd5)
							local newrule = nil 
							if string.find(rulearry,valuemd5..",") then
								newrule = string.gsub(rulearry,valuemd5..",","")
							elseif string.find(rulearry,","..valuemd5) then
                                                        	newrule = string.gsub(rulearry,","..valuemd5,"")
							else
                                                        	newrule = string.gsub(rulearry,valuemd5,"")
							end
							if string.len(newrule) < 1 then
								ruledb:delete(uri_args["type"])
							else
								ruledb:replace(uri_args["type"],newrule)
							end
							ngx.say("the rule --- "..ngx.var.request_body)
							ngx.say("already delete")
							return
						else
							ngx.say("the rule ("..ngx.var.request_body..") is not exist!!!")
							return
						end
					end
				end
				if tag == 1 then
					ruledb:set(valuemd5,ngx.var.request_body)
					ngx.say("the rule --- "..ngx.var.request_body)
					ngx.say("already seted")
				end
			end
		';
		
	}

	location ~ ^/LOGWAFRULECONF {
                allow 192.168.10.94;
                allow 127.0.0.1;
                deny all;
		default_type 'text/plain';
                content_by_lua '
			local ruledb = ngx.shared.ruledb
			local typearry = {"xss","sqlinject","scanfeature","adminpage","sensitivefile"}
			for k,v in ipairs(typearry) do
				local rulearry = nil
				rulearry = ruledb:get(v)
				--ngx.say(rulearry)
				if rulearry == nil then
					ngx.say("Nothing is in "..v)
				else
					ngx.say(v.."---------------------")
					local i = 0
					local j = 0
					while true do
						i = string.find(rulearry , ",", i+1)
						if i == nil then i = string.len(rulearry) end 
						local key = nil
						if i == string.len(rulearry) then
							key = string.sub(rulearry , j+1,i)
						else
							key = string.sub(rulearry , j,i-1)
						end
						ngx.say(key)
						ngx.say(ruledb:get(key))
						if i == string.len(rulearry) then break end
						j = i
					end
				end
			end	
		';
	}
